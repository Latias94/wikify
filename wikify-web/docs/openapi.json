{
  "openapi": "3.1.0",
  "info": {
    "title": "Wikify Web API",
    "description": "AI-powered repository documentation and chat system",
    "contact": {
      "name": "Wikify Team",
      "email": "support@wikify.dev"
    },
    "license": {
      "name": "MIT OR Apache-2.0"
    },
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Local development server"
    },
    {
      "url": "https://api.wikify.dev",
      "description": "Production server"
    }
  ],
  "paths": {
    "/api/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User login",
        "description": "Authenticate user with username and password",
        "operationId": "login_user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data"
          },
          "401": {
            "description": "Invalid credentials"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/auth/refresh": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Refresh access token",
        "description": "Refresh access token using a valid refresh token",
        "operationId": "refresh_token",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data"
          },
          "401": {
            "description": "Invalid or expired refresh token"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Register a new user",
        "description": "Create a new user account with username, email, and password",
        "operationId": "register_user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data"
          },
          "409": {
            "description": "Username or email already exists"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/auth/status": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get authentication status",
        "description": "Get current authentication mode and available features",
        "operationId": "get_auth_status",
        "responses": {
          "200": {
            "description": "Authentication status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthStatusResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/chat": {
      "post": {
        "tags": [
          "Chat"
        ],
        "summary": "Ask a question",
        "description": "Ask a question about the repository using RAG (Retrieval-Augmented Generation)",
        "operationId": "chat_query",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatQueryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Question answered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/chat/stream": {
      "post": {
        "tags": [
          "Chat"
        ],
        "summary": "Stream chat response",
        "description": "Ask a question and receive streaming response (not yet implemented)",
        "operationId": "chat_stream",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatQueryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Streaming response started"
          },
          "501": {
            "description": "Not implemented"
          }
        }
      }
    },
    "/api/config": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get server configuration",
        "description": "Get current server configuration",
        "operationId": "get_config",
        "responses": {
          "200": {
            "description": "Configuration retrieved successfully"
          }
        }
      }
    },
    "/api/files/content": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Get file content",
        "operationId": "get_file_content",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetFileContentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "File content retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileContentResponse"
                }
              }
            }
          },
          "404": {
            "description": "File not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/files/readme": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Get README content for repository",
        "operationId": "get_readme",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetReadmeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "README content retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadmeResponse"
                }
              }
            }
          },
          "404": {
            "description": "Repository not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/files/tree": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Get file tree for repository",
        "operationId": "get_file_tree",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetFileTreeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "File tree retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileTreeResponse"
                }
              }
            }
          },
          "404": {
            "description": "Repository not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/health": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Health check",
        "description": "Check the server health status",
        "operationId": "health_check",
        "responses": {
          "200": {
            "description": "Server is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/history/{repository_id}": {
      "get": {
        "tags": [
          "Chat"
        ],
        "summary": "Get query history",
        "description": "Get chat history for a specific repository (requires SQLite feature)",
        "operationId": "get_query_history",
        "parameters": [
          {
            "name": "repository_id",
            "in": "path",
            "description": "Repository ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Query history retrieved successfully"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/repositories": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "List repositories",
        "description": "List all repositories accessible to the current user",
        "operationId": "list_repositories",
        "responses": {
          "200": {
            "description": "Repositories listed successfully"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "Repository"
        ],
        "summary": "Initialize repository",
        "description": "Initialize a repository for processing and create a new session. If the repository is already being indexed by another session, an error will be returned.",
        "operationId": "initialize_repository",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitializeRepositoryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Repository initialized successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InitializeRepositoryResponse"
                }
              }
            }
          },
          "409": {
            "description": "Repository is already being indexed by another session"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/repositories/{repository_id}": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get repository information",
        "description": "Get information about a repository",
        "operationId": "get_repository_info",
        "parameters": [
          {
            "name": "repository_id",
            "in": "path",
            "description": "Repository ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Repository information retrieved successfully"
          },
          "404": {
            "description": "Repository not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Repository"
        ],
        "summary": "Delete repository",
        "description": "Delete a repository and all associated data including sessions, vector data, and database records",
        "operationId": "delete_repository",
        "parameters": [
          {
            "name": "repository_id",
            "in": "path",
            "description": "Repository ID to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Repository deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteRepositoryResponse"
                }
              }
            }
          },
          "404": {
            "description": "Repository not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/repositories/{repository_id}/reindex": {
      "post": {
        "tags": [
          "Repository"
        ],
        "summary": "Reindex repository",
        "description": "Reindex an existing repository. If the repository is currently being indexed, returns a conflict error. If already indexed, resets the state and starts reindexing.",
        "operationId": "reindex_repository",
        "parameters": [
          {
            "name": "repository_id",
            "in": "path",
            "description": "Repository ID to reindex",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Repository reindexing started successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InitializeRepositoryResponse"
                }
              }
            }
          },
          "404": {
            "description": "Repository not found"
          },
          "409": {
            "description": "Repository is currently being indexed"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/research/iterate/{repository_id}": {
      "post": {
        "tags": [
          "Research"
        ],
        "summary": "Execute research iteration",
        "description": "Execute a single research iteration for a repository",
        "operationId": "research_iteration",
        "parameters": [
          {
            "name": "repository_id",
            "in": "path",
            "description": "Repository ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Research iteration completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResearchProgressResponse"
                }
              }
            }
          },
          "404": {
            "description": "Repository not found"
          },
          "500": {
            "description": "Failed to execute research iteration"
          }
        }
      }
    },
    "/api/research/progress/{repository_id}": {
      "get": {
        "tags": [
          "Research"
        ],
        "summary": "Get research progress",
        "description": "Get the current progress of a research session",
        "operationId": "get_research_progress",
        "parameters": [
          {
            "name": "repository_id",
            "in": "path",
            "description": "Repository ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Research progress retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResearchProgressResponse"
                }
              }
            }
          },
          "404": {
            "description": "Research session not found"
          },
          "500": {
            "description": "Failed to get research progress"
          }
        }
      }
    },
    "/api/research/start": {
      "post": {
        "tags": [
          "Research"
        ],
        "summary": "Start research session",
        "description": "Start a new research session for a repository",
        "operationId": "start_research",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartResearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Research session started successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartResearchResponse"
                }
              }
            }
          },
          "404": {
            "description": "Repository not found"
          },
          "500": {
            "description": "Failed to start research session"
          }
        }
      }
    },
    "/api/research/start-from-template": {
      "post": {
        "tags": [
          "Research"
        ],
        "summary": "Start research from template",
        "description": "Start a new research session using a predefined template",
        "operationId": "start_research_from_template",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartResearchFromTemplateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Research session started successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartResearchResponse"
                }
              }
            }
          },
          "404": {
            "description": "Repository or template not found"
          },
          "500": {
            "description": "Failed to start research session"
          }
        }
      }
    },
    "/api/research/templates": {
      "get": {
        "tags": [
          "Research"
        ],
        "summary": "List research templates",
        "description": "List all available research templates",
        "operationId": "list_research_templates",
        "responses": {
          "200": {
            "description": "Research templates listed successfully"
          },
          "500": {
            "description": "Failed to list research templates"
          }
        }
      }
    },
    "/api/research/templates/category/{category}": {
      "get": {
        "tags": [
          "Research"
        ],
        "summary": "List templates by category",
        "description": "List research templates filtered by category",
        "operationId": "list_templates_by_category",
        "parameters": [
          {
            "name": "category",
            "in": "path",
            "description": "Template category",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Research templates listed successfully"
          },
          "500": {
            "description": "Failed to list research templates"
          }
        }
      }
    },
    "/api/research/templates/{template_id}": {
      "get": {
        "tags": [
          "Research"
        ],
        "summary": "Get research template",
        "description": "Get a specific research template by ID",
        "operationId": "get_research_template",
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "description": "Template ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Research template retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResearchTemplateResponse"
                }
              }
            }
          },
          "404": {
            "description": "Template not found"
          },
          "500": {
            "description": "Failed to get research template"
          }
        }
      }
    },
    "/api/research/{research_id}": {
      "get": {
        "tags": [
          "Research"
        ],
        "summary": "Get research progress by ID",
        "description": "Get the current progress of a research session by research ID",
        "operationId": "get_research_progress_by_id",
        "parameters": [
          {
            "name": "research_id",
            "in": "path",
            "description": "Research session ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Research progress retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResearchProgressResponse"
                }
              }
            }
          },
          "404": {
            "description": "Research session not found"
          },
          "500": {
            "description": "Failed to get research progress"
          }
        }
      }
    },
    "/api/research/{research_id}/stop": {
      "post": {
        "tags": [
          "Research"
        ],
        "summary": "Stop research session",
        "description": "Stop an active research session",
        "operationId": "stop_research",
        "parameters": [
          {
            "name": "research_id",
            "in": "path",
            "description": "Research session ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Research session stopped successfully"
          },
          "404": {
            "description": "Research session not found"
          },
          "500": {
            "description": "Failed to stop research session"
          }
        }
      }
    },
    "/api/wiki/generate": {
      "post": {
        "tags": [
          "Wiki"
        ],
        "summary": "Generate wiki documentation",
        "description": "Generate comprehensive wiki documentation for a repository",
        "operationId": "generate_wiki",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateWikiRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Wiki generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateWikiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Session not found"
          },
          "500": {
            "description": "Wiki generation failed"
          }
        }
      }
    },
    "/api/wiki/{repository_id}": {
      "get": {
        "tags": [
          "Wiki"
        ],
        "summary": "Get generated wiki",
        "description": "Retrieve the generated wiki documentation for a repository. No authentication required.",
        "operationId": "get_wiki",
        "parameters": [
          {
            "name": "repository_id",
            "in": "path",
            "description": "Repository ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Wiki retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WikiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Repository not found"
          },
          "500": {
            "description": "Failed to generate wiki"
          }
        }
      }
    },
    "/api/wiki/{repository_id}/export": {
      "post": {
        "tags": [
          "Wiki"
        ],
        "summary": "Export wiki",
        "description": "Export generated wiki in various formats (not yet implemented)",
        "operationId": "export_wiki",
        "parameters": [
          {
            "name": "repository_id",
            "in": "path",
            "description": "Repository ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Wiki exported successfully"
          },
          "501": {
            "description": "Not implemented"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AuthFeatures": {
        "type": "object",
        "description": "Available authentication features",
        "required": [
          "research_engine",
          "wiki_generation",
          "multi_language"
        ],
        "properties": {
          "multi_language": {
            "type": "boolean",
            "description": "Whether multi-language support is available",
            "example": true
          },
          "research_engine": {
            "type": "boolean",
            "description": "Whether research engine is available",
            "example": true
          },
          "wiki_generation": {
            "type": "boolean",
            "description": "Whether wiki generation is available",
            "example": true
          }
        }
      },
      "AuthResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenPair",
            "description": "Authentication tokens"
          },
          {
            "type": "object",
            "required": [
              "user"
            ],
            "properties": {
              "user": {
                "$ref": "#/components/schemas/UserInfo",
                "description": "User information"
              }
            }
          }
        ],
        "description": "User registration/login response"
      },
      "AuthStatusResponse": {
        "type": "object",
        "description": "Authentication status response",
        "required": [
          "auth_mode",
          "auth_required",
          "registration_enabled",
          "features"
        ],
        "properties": {
          "auth_mode": {
            "type": "string",
            "description": "Authentication mode: \"open\", \"private\", or \"enterprise\"",
            "example": "open"
          },
          "auth_required": {
            "type": "boolean",
            "description": "Whether authentication is required",
            "example": false
          },
          "features": {
            "$ref": "#/components/schemas/AuthFeatures",
            "description": "Available features"
          },
          "registration_enabled": {
            "type": "boolean",
            "description": "Whether user registration is enabled",
            "example": true
          }
        }
      },
      "ChatQueryRequest": {
        "type": "object",
        "description": "Chat query request",
        "required": [
          "repository_id",
          "question"
        ],
        "properties": {
          "context": {
            "type": [
              "string",
              "null"
            ]
          },
          "max_results": {
            "type": [
              "integer",
              "null"
            ],
            "description": "Maximum number of results to return",
            "minimum": 0
          },
          "question": {
            "type": "string",
            "example": "How does the authentication work?"
          },
          "repository_id": {
            "type": "string",
            "example": "repo-uuid-string"
          }
        }
      },
      "ChatQueryResponse": {
        "type": "object",
        "description": "Chat query response",
        "required": [
          "answer",
          "sources",
          "repository_id",
          "timestamp"
        ],
        "properties": {
          "answer": {
            "type": "string"
          },
          "repository_id": {
            "type": "string",
            "example": "repo-uuid-string"
          },
          "sources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SourceDocument"
            }
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DeleteRepositoryResponse": {
        "type": "object",
        "description": "Repository deletion response",
        "required": [
          "status",
          "message",
          "deleted_repository_id"
        ],
        "properties": {
          "deleted_repository_id": {
            "type": "string",
            "example": "uuid-string"
          },
          "message": {
            "type": "string",
            "example": "Repository deleted successfully"
          },
          "status": {
            "type": "string",
            "example": "success"
          }
        }
      },
      "FileContentResponse": {
        "type": "object",
        "description": "Response containing file content",
        "required": [
          "repository_id",
          "file_path",
          "content",
          "size",
          "encoding"
        ],
        "properties": {
          "branch": {
            "type": [
              "string",
              "null"
            ]
          },
          "content": {
            "type": "string"
          },
          "encoding": {
            "type": "string"
          },
          "file_path": {
            "type": "string"
          },
          "repository_id": {
            "type": "string"
          },
          "size": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "FileTreeResponse": {
        "type": "object",
        "description": "Response containing file tree",
        "required": [
          "repository_id",
          "files",
          "total_files"
        ],
        "properties": {
          "branch": {
            "type": [
              "string",
              "null"
            ]
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RepositoryFileInfo"
            }
          },
          "repository_id": {
            "type": "string"
          },
          "total_files": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "GenerateWikiRequest": {
        "type": "object",
        "description": "Wiki generation request",
        "required": [
          "repository_id",
          "config"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/WikiGenerationConfig"
          },
          "repository_id": {
            "type": "string",
            "example": "uuid-string"
          }
        }
      },
      "GenerateWikiResponse": {
        "type": "object",
        "description": "Wiki generation response",
        "required": [
          "wiki_id",
          "status",
          "pages_count",
          "sections_count"
        ],
        "properties": {
          "pages_count": {
            "type": "integer",
            "example": 25,
            "minimum": 0
          },
          "sections_count": {
            "type": "integer",
            "example": 8,
            "minimum": 0
          },
          "status": {
            "type": "string",
            "example": "success"
          },
          "wiki_id": {
            "type": "string",
            "example": "uuid-string"
          }
        }
      },
      "GetFileContentRequest": {
        "type": "object",
        "description": "Request to get file content",
        "required": [
          "repository_id",
          "file_path"
        ],
        "properties": {
          "branch": {
            "type": [
              "string",
              "null"
            ]
          },
          "file_path": {
            "type": "string"
          },
          "repository_id": {
            "type": "string"
          }
        }
      },
      "GetFileTreeRequest": {
        "type": "object",
        "description": "Request to get file tree",
        "required": [
          "repository_id"
        ],
        "properties": {
          "branch": {
            "type": [
              "string",
              "null"
            ]
          },
          "repository_id": {
            "type": "string"
          }
        }
      },
      "GetReadmeRequest": {
        "type": "object",
        "description": "Request to get README content",
        "required": [
          "repository_id"
        ],
        "properties": {
          "branch": {
            "type": [
              "string",
              "null"
            ]
          },
          "repository_id": {
            "type": "string"
          }
        }
      },
      "HealthResponse": {
        "type": "object",
        "description": "Health check response",
        "required": [
          "status",
          "timestamp",
          "version"
        ],
        "properties": {
          "status": {
            "type": "string",
            "example": "healthy"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "version": {
            "type": "string",
            "example": "0.1.0"
          }
        }
      },
      "InitializeRepositoryRequest": {
        "type": "object",
        "description": "Repository initialization request",
        "required": [
          "repository"
        ],
        "properties": {
          "access_token": {
            "type": [
              "string",
              "null"
            ]
          },
          "auto_generate_wiki": {
            "type": [
              "boolean",
              "null"
            ],
            "example": true
          },
          "auto_index": {
            "type": [
              "boolean",
              "null"
            ],
            "example": true
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "additionalProperties": {
              "type": "string"
            },
            "propertyNames": {
              "type": "string"
            }
          },
          "repo_type": {
            "type": [
              "string",
              "null"
            ],
            "example": "github"
          },
          "repository": {
            "type": "string",
            "example": "https://github.com/user/repo"
          }
        }
      },
      "InitializeRepositoryResponse": {
        "type": "object",
        "description": "Repository initialization response",
        "required": [
          "repository_id",
          "status",
          "message"
        ],
        "properties": {
          "message": {
            "type": "string",
            "example": "Repository initialized successfully"
          },
          "repository_id": {
            "type": "string",
            "example": "uuid-string"
          },
          "status": {
            "type": "string",
            "example": "success"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "description": "User login request",
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "password": {
            "type": "string",
            "description": "User password",
            "example": "secure_password123"
          },
          "username": {
            "type": "string",
            "description": "Username or email",
            "example": "john_doe"
          }
        }
      },
      "ReadmeResponse": {
        "type": "object",
        "description": "Response containing README content",
        "required": [
          "repository_id",
          "found"
        ],
        "properties": {
          "branch": {
            "type": [
              "string",
              "null"
            ]
          },
          "content": {
            "type": [
              "string",
              "null"
            ]
          },
          "found": {
            "type": "boolean"
          },
          "repository_id": {
            "type": "string"
          }
        }
      },
      "RefreshRequest": {
        "type": "object",
        "description": "Token refresh request",
        "required": [
          "refresh_token"
        ],
        "properties": {
          "refresh_token": {
            "type": "string",
            "description": "Refresh token to exchange for new access token",
            "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
          }
        }
      },
      "RegisterRequest": {
        "type": "object",
        "description": "User registration request",
        "required": [
          "username",
          "email",
          "password"
        ],
        "properties": {
          "display_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Optional display name",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "Email address for the new account",
            "example": "john@example.com"
          },
          "password": {
            "type": "string",
            "description": "Password for the new account",
            "example": "secure_password123"
          },
          "username": {
            "type": "string",
            "description": "Username for the new account",
            "example": "john_doe"
          }
        }
      },
      "RepositoryFileInfo": {
        "type": "object",
        "description": "File information in the repository",
        "required": [
          "path",
          "file_type"
        ],
        "properties": {
          "file_type": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "sha": {
            "type": [
              "string",
              "null"
            ]
          },
          "size": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "minimum": 0
          }
        }
      },
      "ResearchCategory": {
        "type": "string",
        "description": "Research template category",
        "enum": [
          "Technical",
          "Architecture",
          "Security",
          "Performance",
          "Documentation",
          "Business",
          "Custom"
        ]
      },
      "ResearchConfigRequest": {
        "type": "object",
        "description": "Research configuration request",
        "properties": {
          "generate_diagrams": {
            "type": [
              "boolean",
              "null"
            ],
            "example": true
          },
          "include_code_analysis": {
            "type": [
              "boolean",
              "null"
            ],
            "example": true
          },
          "max_iterations": {
            "type": [
              "integer",
              "null"
            ],
            "example": 5,
            "minimum": 0
          },
          "max_sources_per_iteration": {
            "type": [
              "integer",
              "null"
            ],
            "example": 10,
            "minimum": 0
          }
        }
      },
      "ResearchProgressResponse": {
        "type": "object",
        "description": "Research progress response",
        "required": [
          "research_id",
          "status",
          "current_iteration",
          "total_iterations",
          "current_focus",
          "findings",
          "progress_percentage",
          "timestamp"
        ],
        "properties": {
          "current_focus": {
            "type": "string",
            "example": "Analyzing authentication patterns"
          },
          "current_iteration": {
            "type": "integer",
            "example": 3,
            "minimum": 0
          },
          "findings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "progress_percentage": {
            "type": "number",
            "format": "double",
            "example": 0.6
          },
          "research_id": {
            "type": "string",
            "example": "research-uuid-string"
          },
          "status": {
            "type": "string",
            "example": "in_progress"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "total_iterations": {
            "type": "integer",
            "example": 5,
            "minimum": 0
          }
        }
      },
      "ResearchTemplateResponse": {
        "type": "object",
        "description": "Research template response",
        "required": [
          "id",
          "name",
          "description",
          "category",
          "questions",
          "config"
        ],
        "properties": {
          "category": {
            "$ref": "#/components/schemas/ResearchCategory"
          },
          "config": {},
          "description": {
            "type": "string",
            "example": "Comprehensive security analysis template"
          },
          "id": {
            "type": "string",
            "example": "template-uuid"
          },
          "name": {
            "type": "string",
            "example": "Security Analysis"
          },
          "questions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SourceDocument": {
        "type": "object",
        "description": "Source document information",
        "required": [
          "file_path",
          "content",
          "similarity_score"
        ],
        "properties": {
          "content": {
            "type": "string"
          },
          "file_path": {
            "type": "string",
            "example": "src/main.rs"
          },
          "similarity_score": {
            "type": "number",
            "format": "double",
            "example": 0.85
          }
        }
      },
      "StartResearchFromTemplateRequest": {
        "type": "object",
        "description": "Start research from template request",
        "required": [
          "repository_id",
          "template_id"
        ],
        "properties": {
          "config_overrides": {},
          "custom_questions": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          },
          "repository_id": {
            "type": "string",
            "example": "repo-uuid-string"
          },
          "template_id": {
            "type": "string",
            "example": "template-uuid"
          }
        }
      },
      "StartResearchRequest": {
        "type": "object",
        "description": "Research start request",
        "required": [
          "repository_id",
          "research_question"
        ],
        "properties": {
          "config": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ResearchConfigRequest"
              }
            ]
          },
          "repository_id": {
            "type": "string",
            "example": "repo-uuid-string"
          },
          "research_question": {
            "type": "string",
            "example": "Deep analysis of authentication system"
          }
        }
      },
      "StartResearchResponse": {
        "type": "object",
        "description": "Research start response",
        "required": [
          "research_id",
          "status",
          "message"
        ],
        "properties": {
          "message": {
            "type": "string",
            "example": "Research session started successfully"
          },
          "research_id": {
            "type": "string",
            "example": "research-uuid-string"
          },
          "status": {
            "type": "string",
            "example": "started"
          }
        }
      },
      "TokenPair": {
        "type": "object",
        "description": "JWT token pair (access + refresh)",
        "required": [
          "access_token",
          "refresh_token",
          "token_type",
          "expires_in"
        ],
        "properties": {
          "access_token": {
            "type": "string",
            "description": "Access token for API requests",
            "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
          },
          "expires_in": {
            "type": "integer",
            "format": "int64",
            "description": "Token expiration time in seconds",
            "example": 3600
          },
          "refresh_token": {
            "type": "string",
            "description": "Refresh token for obtaining new access tokens",
            "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
          },
          "token_type": {
            "type": "string",
            "description": "Token type (always \"Bearer\")",
            "example": "Bearer"
          }
        }
      },
      "UserInfo": {
        "type": "object",
        "description": "Public user information",
        "required": [
          "id",
          "username",
          "email",
          "permissions",
          "is_admin",
          "created_at"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Account creation timestamp",
            "example": "2024-01-01T00:00:00Z"
          },
          "display_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Display name",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "Email address",
            "example": "john@example.com"
          },
          "id": {
            "type": "string",
            "description": "Unique user identifier",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "is_admin": {
            "type": "boolean",
            "description": "Whether user is admin",
            "example": false
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "User permissions",
            "example": [
              "GenerateWiki",
              "DeepResearch"
            ]
          },
          "username": {
            "type": "string",
            "description": "Username",
            "example": "john_doe"
          }
        }
      },
      "WikiGenerationConfig": {
        "type": "object",
        "description": "Wiki generation configuration",
        "properties": {
          "comprehensive_view": {
            "type": [
              "boolean",
              "null"
            ],
            "example": false
          },
          "include_diagrams": {
            "type": [
              "boolean",
              "null"
            ],
            "example": true
          },
          "language": {
            "type": [
              "string",
              "null"
            ],
            "example": "en"
          },
          "max_pages": {
            "type": [
              "integer",
              "null"
            ],
            "example": 50,
            "minimum": 0
          }
        }
      },
      "WikiPageResponse": {
        "type": "object",
        "description": "Wiki page response structure",
        "required": [
          "id",
          "title",
          "content",
          "description",
          "importance",
          "file_paths",
          "related_pages",
          "tags",
          "reading_time",
          "generated_at",
          "source_documents"
        ],
        "properties": {
          "content": {
            "type": "string",
            "example": "# Main Documentation\n\nThis is the main documentation..."
          },
          "description": {
            "type": "string",
            "example": "Main documentation page"
          },
          "file_paths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "generated_at": {
            "type": "string",
            "example": "2024-01-01T00:00:00Z"
          },
          "id": {
            "type": "string",
            "example": "main"
          },
          "importance": {
            "type": "string",
            "example": "Critical"
          },
          "reading_time": {
            "type": "integer",
            "example": 5,
            "minimum": 0
          },
          "related_pages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "source_documents": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string",
            "example": "Main Documentation"
          }
        }
      },
      "WikiResponse": {
        "type": "object",
        "description": "Wiki response structure",
        "required": [
          "id",
          "title",
          "description",
          "pages",
          "sections"
        ],
        "properties": {
          "description": {
            "type": "string",
            "example": "Generated wiki for repository"
          },
          "id": {
            "type": "string",
            "example": "repo_123"
          },
          "pages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WikiPageResponse"
            }
          },
          "sections": {
            "type": "array",
            "items": {}
          },
          "title": {
            "type": "string",
            "example": "Repository Wiki"
          }
        }
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key"
      }
    }
  },
  "tags": [
    {
      "name": "Health",
      "description": "Health check endpoints"
    },
    {
      "name": "Authentication",
      "description": "User authentication and authorization"
    },
    {
      "name": "Repository",
      "description": "Repository management operations"
    },
    {
      "name": "Chat",
      "description": "AI chat and query operations"
    },
    {
      "name": "Wiki",
      "description": "Wiki generation and management"
    },
    {
      "name": "Research",
      "description": "Deep research and investigation operations"
    },
    {
      "name": "Session",
      "description": "Session management operations"
    },
    {
      "name": "Configuration",
      "description": "Server configuration operations"
    }
  ]
}