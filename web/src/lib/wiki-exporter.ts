/**
 * Wiki导出功能
 * 将wiki内容导出为markdown文件并打包成zip
 */

import JSZip from 'jszip';
import { WikiStructure, WikiPage, WikiSection } from '@/types/api';

/**
 * 导出配置
 */
export interface ExportConfig {
  includeMetadata: boolean; // 是否包含元数据
  includeTableOfContents: boolean; // 是否生成目录
  fileNameFormat: 'title' | 'id'; // 文件名格式
  folderStructure: 'flat' | 'hierarchical'; // 文件夹结构
}

/**
 * 默认导出配置
 */
const DEFAULT_EXPORT_CONFIG: ExportConfig = {
  includeMetadata: true,
  includeTableOfContents: true,
  fileNameFormat: 'title',
  folderStructure: 'hierarchical'
};

/**
 * 导出统计信息
 */
export interface ExportStats {
  totalFiles: number;
  totalPages: number;
  totalSections: number;
  zipSize: number; // bytes
  exportTime: number; // ms
}

/**
 * Wiki导出器类
 */
export class WikiExporter {
  private config: ExportConfig;

  constructor(config: Partial<ExportConfig> = {}) {
    this.config = { ...DEFAULT_EXPORT_CONFIG, ...config };
  }

  /**
   * 导出wiki为zip文件
   */
  public async exportToZip(wiki: WikiStructure): Promise<{ blob: Blob; stats: ExportStats }> {
    console.log('🚀 Starting wiki export:', wiki.title);
    const startTime = performance.now();

    const zip = new JSZip();
    let fileCount = 0;

    // 创建根目录
    const rootFolder = zip.folder(this.sanitizeFileName(wiki.title));
    if (!rootFolder) {
      throw new Error('Failed to create root folder');
    }

    // 生成README.md
    const readmeContent = this.generateReadme(wiki);
    rootFolder.file('README.md', readmeContent);
    fileCount++;

    // 生成目录文件
    if (this.config.includeTableOfContents) {
      const tocContent = this.generateTableOfContents(wiki);
      rootFolder.file('TABLE_OF_CONTENTS.md', tocContent);
      fileCount++;
    }

    // 导出页面
    if (this.config.folderStructure === 'hierarchical') {
      // 层次结构导出
      const pagesFolder = rootFolder.folder('pages');
      if (pagesFolder) {
        for (const page of wiki.pages) {
          fileCount += await this.exportPageHierarchical(pagesFolder, page);
        }
      }

      // 导出根级章节
      if (wiki.sections.length > 0) {
        const sectionsFolder = rootFolder.folder('sections');
        if (sectionsFolder) {
          for (const section of wiki.sections) {
            fileCount += await this.exportSectionHierarchical(sectionsFolder, section);
          }
        }
      }
    } else {
      // 扁平结构导出
      for (const page of wiki.pages) {
        fileCount += await this.exportPageFlat(rootFolder, page);
      }

      for (const section of wiki.sections) {
        fileCount += await this.exportSectionFlat(rootFolder, section, 'section');
      }
    }

    // 生成zip文件
    const blob = await zip.generateAsync({
      type: 'blob',
      compression: 'DEFLATE',
      compressionOptions: { level: 6 }
    });

    const endTime = performance.now();

    const stats: ExportStats = {
      totalFiles: fileCount,
      totalPages: wiki.pages.length,
      totalSections: this.countSections(wiki.sections),
      zipSize: blob.size,
      exportTime: endTime - startTime
    };

    console.log('✅ Wiki export completed:', stats);
    return { blob, stats };
  }

  /**
   * 触发下载
   */
  public downloadZip(blob: Blob, filename: string): void {
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }

  /**
   * 生成README.md
   */
  private generateReadme(wiki: WikiStructure): string {
    const lines = [
      `# ${wiki.title}`,
      '',
      wiki.description,
      '',
      '## 📊 Statistics',
      '',
      `- **Pages**: ${wiki.pages.length}`,
      `- **Sections**: ${this.countSections(wiki.sections)}`,
      `- **Generated**: ${new Date().toISOString()}`,
      '',
      '## 📁 Structure',
      '',
      '```',
      wiki.title + '/',
      '├── README.md',
      '├── TABLE_OF_CONTENTS.md',
      '├── pages/',
      '└── sections/',
      '```',
      '',
      '## 🔍 How to Use',
      '',
      '1. Start with `TABLE_OF_CONTENTS.md` for an overview',
      '2. Browse pages in the `pages/` folder',
      '3. Explore sections in the `sections/` folder',
      '',
      '---',
      '',
      '*Generated by Wikify - https://github.com/your-repo/wikify*'
    ];

    return lines.join('\n');
  }

  /**
   * 生成目录
   */
  private generateTableOfContents(wiki: WikiStructure): string {
    const lines = [
      `# Table of Contents - ${wiki.title}`,
      '',
      wiki.description,
      ''
    ];

    if (wiki.pages.length > 0) {
      lines.push('## 📄 Pages', '');
      wiki.pages.forEach((page, index) => {
        const importance = page.importance ? ` (${page.importance})` : '';
        lines.push(`${index + 1}. [${page.title}](pages/${this.getFileName(page.title, page.id)}.md)${importance}`);
        
        // 添加页面的章节
        if (page.sections.length > 0) {
          page.sections.forEach(section => {
            lines.push(`   - [${section.title}](pages/${this.getFileName(page.title, page.id)}.md#${this.generateAnchor(section.title)})`);
            this.addSubsectionsToToc(lines, section.subsections, '     ');
          });
        }
      });
      lines.push('');
    }

    if (wiki.sections.length > 0) {
      lines.push('## 📑 Sections', '');
      wiki.sections.forEach((section, index) => {
        lines.push(`${index + 1}. [${section.title}](sections/${this.getFileName(section.title, section.id)}.md)`);
        this.addSubsectionsToToc(lines, section.subsections, '   ');
      });
    }

    return lines.join('\n');
  }

  /**
   * 递归添加子章节到目录
   */
  private addSubsectionsToToc(lines: string[], subsections: WikiSection[], indent: string): void {
    subsections.forEach(subsection => {
      lines.push(`${indent}- [${subsection.title}](sections/${this.getFileName(subsection.title, subsection.id)}.md)`);
      if (subsection.subsections.length > 0) {
        this.addSubsectionsToToc(lines, subsection.subsections, indent + '  ');
      }
    });
  }

  /**
   * 层次结构导出页面
   */
  private async exportPageHierarchical(folder: JSZip, page: WikiPage): Promise<number> {
    const content = this.generatePageMarkdown(page);
    const fileName = `${this.getFileName(page.title, page.id)}.md`;
    folder.file(fileName, content);

    let fileCount = 1;

    // 如果页面有章节，创建子文件夹
    if (page.sections.length > 0) {
      const pageFolder = folder.folder(this.sanitizeFileName(page.title));
      if (pageFolder) {
        for (const section of page.sections) {
          fileCount += await this.exportSectionHierarchical(pageFolder, section);
        }
      }
    }

    return fileCount;
  }

  /**
   * 层次结构导出章节
   */
  private async exportSectionHierarchical(folder: JSZip, section: WikiSection): Promise<number> {
    const content = this.generateSectionMarkdown(section);
    const fileName = `${this.getFileName(section.title, section.id)}.md`;
    folder.file(fileName, content);

    let fileCount = 1;

    // 递归导出子章节
    if (section.subsections.length > 0) {
      const sectionFolder = folder.folder(this.sanitizeFileName(section.title));
      if (sectionFolder) {
        for (const subsection of section.subsections) {
          fileCount += await this.exportSectionHierarchical(sectionFolder, subsection);
        }
      }
    }

    return fileCount;
  }

  /**
   * 扁平结构导出页面
   */
  private async exportPageFlat(folder: JSZip, page: WikiPage): Promise<number> {
    const content = this.generatePageMarkdown(page);
    const fileName = `page_${this.getFileName(page.title, page.id)}.md`;
    folder.file(fileName, content);

    let fileCount = 1;

    // 导出页面的章节
    for (const section of page.sections) {
      fileCount += await this.exportSectionFlat(folder, section, 'page_section');
    }

    return fileCount;
  }

  /**
   * 扁平结构导出章节
   */
  private async exportSectionFlat(folder: JSZip, section: WikiSection, prefix: string): Promise<number> {
    const content = this.generateSectionMarkdown(section);
    const fileName = `${prefix}_${this.getFileName(section.title, section.id)}.md`;
    folder.file(fileName, content);

    let fileCount = 1;

    // 递归导出子章节
    for (const subsection of section.subsections) {
      fileCount += await this.exportSectionFlat(folder, subsection, `${prefix}_subsection`);
    }

    return fileCount;
  }

  /**
   * 生成页面markdown内容
   */
  private generatePageMarkdown(page: WikiPage): string {
    const lines = [`# ${page.title}`, ''];

    // 添加元数据
    if (this.config.includeMetadata) {
      lines.push('---');
      lines.push(`id: ${page.id}`);
      lines.push(`importance: ${page.importance}`);
      if (page.file_paths.length > 0) {
        lines.push(`files:`);
        page.file_paths.forEach(path => lines.push(`  - ${path}`));
      }
      if (page.related_pages.length > 0) {
        lines.push(`related_pages:`);
        page.related_pages.forEach(id => lines.push(`  - ${id}`));
      }
      lines.push('---', '');
    }

    // 添加内容
    lines.push(page.content);

    // 添加章节
    if (page.sections.length > 0) {
      lines.push('', '## Sections', '');
      page.sections.forEach(section => {
        lines.push(`- [${section.title}](#${this.generateAnchor(section.title)})`);
      });

      page.sections.forEach(section => {
        lines.push('', `## ${section.title}`, '');
        lines.push(section.content);
        this.addSubsectionsToMarkdown(lines, section.subsections, 3);
      });
    }

    return lines.join('\n');
  }

  /**
   * 生成章节markdown内容
   */
  private generateSectionMarkdown(section: WikiSection): string {
    const lines = [`# ${section.title}`, ''];

    // 添加元数据
    if (this.config.includeMetadata) {
      lines.push('---');
      lines.push(`id: ${section.id}`);
      lines.push('---', '');
    }

    // 添加内容
    lines.push(section.content);

    // 添加子章节
    this.addSubsectionsToMarkdown(lines, section.subsections, 2);

    return lines.join('\n');
  }

  /**
   * 递归添加子章节到markdown
   */
  private addSubsectionsToMarkdown(lines: string[], subsections: WikiSection[], level: number): void {
    subsections.forEach(subsection => {
      const heading = '#'.repeat(level);
      lines.push('', `${heading} ${subsection.title}`, '');
      lines.push(subsection.content);
      
      if (subsection.subsections.length > 0) {
        this.addSubsectionsToMarkdown(lines, subsection.subsections, level + 1);
      }
    });
  }

  /**
   * 获取文件名
   */
  private getFileName(title: string, id: string): string {
    if (this.config.fileNameFormat === 'id') {
      return this.sanitizeFileName(id);
    }
    return this.sanitizeFileName(title);
  }

  /**
   * 清理文件名
   */
  private sanitizeFileName(name: string): string {
    return name
      .replace(/[<>:"/\\|?*]/g, '_') // 替换非法字符
      .replace(/\s+/g, '_') // 替换空格
      .replace(/_+/g, '_') // 合并多个下划线
      .replace(/^_|_$/g, '') // 移除首尾下划线
      .toLowerCase();
  }

  /**
   * 生成锚点
   */
  private generateAnchor(title: string): string {
    return title
      .toLowerCase()
      .replace(/[^\w\s-]/g, '')
      .replace(/\s+/g, '-');
  }

  /**
   * 统计章节数量
   */
  private countSections(sections: WikiSection[]): number {
    let count = sections.length;
    sections.forEach(section => {
      count += this.countSections(section.subsections);
    });
    return count;
  }
}

/**
 * 全局导出器实例
 */
export const wikiExporter = new WikiExporter();
